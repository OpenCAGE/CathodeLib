using CATHODE.Scripting;
using CATHODE.Scripting.Internal;
using CathodeLib;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Threading.Tasks;
using CATHODE.Scripting.Internal.Parsers;


#if UNITY_EDITOR || UNITY_STANDALONE_WIN
using UnityEngine;
#else
using System.Numerics;
#endif

namespace CATHODE
{
    /* DATA/ENV/PRODUCTION/x/WORLD/COMMANDS.PAK */
    public class Commands : CathodeFile
    {
        public List<Composite> Entries = new List<Composite>();
        public static new Implementation Implementation = Implementation.CREATE | Implementation.LOAD | Implementation.SAVE;
        public Commands(string path) : base(path)
        {
            Utils = new CommandsUtils(this);
        }

        ~Commands()
        {
            Entries.Clear();
        }

        // This is always size of 3, in the order:
        //  - Root Instance (the map's entry composite, usually containing entities that call mission/environment composites)
        //  - Global Instance (the main data handler for keeping track of mission number, etc - kinda like a big singleton)
        //  - Pause Menu Instance
        private ShortGuid[] _entryPoints = null;
        private Composite[] _entryPointObjects = null;

        //Set this value to true before initialising your Commands object to load with non-capitalised composite names.
        //Changing this value AFTER loading will not make any difference to the loaded Commands object, only future ones.
        public static bool UsePrettyPaths = false;

        //Use this to access various utilities for dealing with Commands data.
        //Additional metadata generated by these utils will write to your Commands file when saved.
        public readonly CommandsUtils Utils;

        #region FILE_IO
        override protected bool LoadInternal()
        {
            byte[] content = File.ReadAllBytes(_filepath);
            switch (Path.GetExtension(_filepath).ToUpper())
            {
                case ".PAK":
                    CommandsPAK.Read(content, out _entryPoints, out Entries);
                    break;
                case ".BIN":
                    CommandsBIN.Read(content, out _entryPoints, out Entries);
                    break;
                default:
                    return false;
            }

            if (UsePrettyPaths)
            {
                foreach (Composite composite in Entries)
                {
                    string prettyPath = CustomTable.Vanilla.CompositePaths.GetPrettyPath(composite.shortGUID);
                    if (prettyPath != "") composite.name = prettyPath;
                    composite.name = composite.name.Replace("/", "\\");
                }   
            }

            return true;
        }

        override protected bool SaveInternal()
        {
            //Validate entry points and composite count
            if (Entries.Count == 0) return false;
            if (_entryPoints == null) _entryPoints = new ShortGuid[3];
            if (_entryPoints[0].IsInvalid || _entryPoints[1].IsInvalid || _entryPoints[2].IsInvalid || Entries.Count == 0) return false;

            #region FIX_POTENTIAL_ERRORS
            //If we have composites but the entry points are broken, correct them first!
            if (GetComposite(_entryPoints[2]) == null)
            {
                Composite pausemenu = GetComposite("PAUSEMENU");
                if (pausemenu == null)
                {
                    Console.WriteLine("WARNING: PAUSEMENU composite does not exist! Creating blank placeholder.");
                    pausemenu = AddComposite("PAUSEMENU");
                    pausemenu.shortGUID = new ShortGuid("FE-7B-FE-B3");
                }
                _entryPoints[2] = pausemenu.shortGUID;
            }
            if (GetComposite(_entryPoints[1]) == null)
            {
                Composite global = GetComposite("GLOBAL");
                if (global == null)
                {
                    Console.WriteLine("WARNING: GLOBAL composite does not exist! Creating blank placeholder. This may cause issues with GLOBAL references.");
                    global = AddComposite("GLOBAL");
                    global.shortGUID = new ShortGuid("1D-2E-CE-E5");
                }
                _entryPoints[1] = global.shortGUID;
            }
            if (GetComposite(_entryPoints[0]) == null)
            {
                Console.WriteLine("WARNING: Entry point was not set! Defaulting to composite at index zero.");
                _entryPoints[0] = Entries[0].shortGUID;
            }
            RefreshEntryPointObjects();

            //Fix (& verify) entity-attached resource info
            Parallel.For(0, Entries.Count, i =>
            {
                Parallel.For(0, Entries[i].functions.Count, x =>
                {
                    if (Entries[i].functions[x].function.IsFunctionType)
                    {
                        switch (Entries[i].functions[x].function.AsFunctionType)
                        {
                            case FunctionType.TRAV_1ShotClimbUnder:
                            case FunctionType.TRAV_1ShotFloorVentEntrance:
                            case FunctionType.TRAV_1ShotFloorVentExit:
                            case FunctionType.TRAV_1ShotLeap:
                            case FunctionType.TRAV_1ShotSpline:
                            case FunctionType.TRAV_1ShotVentEntrance:
                            case FunctionType.TRAV_1ShotVentExit:
                            case FunctionType.TRAV_ContinuousBalanceBeam:
                            case FunctionType.TRAV_ContinuousCinematicSidle:
                            case FunctionType.TRAV_ContinuousClimbingWall:
                            case FunctionType.TRAV_ContinuousLadder:
                            case FunctionType.TRAV_ContinuousLedge:
                            case FunctionType.TRAV_ContinuousPipe:
                            case FunctionType.TRAV_ContinuousTightGap:
                                Entries[i].functions[x].AddResource(ResourceType.TRAVERSAL_SEGMENT);
                                break;
                            case FunctionType.NavMeshBarrier:
                                Entries[i].functions[x].AddResource(ResourceType.NAV_MESH_BARRIER_RESOURCE);
                                break;
                            case FunctionType.ExclusiveMaster:
                                Entries[i].functions[x].AddResource(ResourceType.EXCLUSIVE_MASTER_STATE_RESOURCE);
                                break;

                            //NOTE: Really, DYNAMIC_PHYSICS_SYSTEM isn't actually on the entity, it's on the composite
                            case FunctionType.PhysicsSystem:
                                Parameter dps_index = Entries[i].functions[x].GetParameter("system_index");
                                if (dps_index == null)
                                {
                                    dps_index = new Parameter("system_index", new cInteger(0));
                                    Entries[i].functions[x].parameters.Add(dps_index);
                                }
                                Entries[i].functions[x].AddResource(ResourceType.DYNAMIC_PHYSICS_SYSTEM).index = ((cInteger)dps_index.content).value;
                                break;

                            case FunctionType.EnvironmentModelReference:
                                Parameter rsc = Entries[i].functions[x].GetParameter("resource");
                                if (rsc == null)
                                {
                                    rsc = new Parameter("resource", new cResource(Entries[i].functions[x].shortGUID));
                                    Entries[i].functions[x].parameters.Add(rsc);
                                }
                                cResource rsc_p = (cResource)rsc.content;
                                rsc_p.AddResource(ResourceType.ANIMATED_MODEL);
                                break;
                            case FunctionType.ModelReference:
                                Parameter mdl = Entries[i].functions[x].GetParameter("resource");
                                if (mdl == null)
                                {
                                    mdl = new Parameter("resource", new cResource(Entries[i].functions[x].shortGUID));
                                    Entries[i].functions[x].parameters.Add(mdl);
                                }
                                break;
                        }
                    }
                });
            });
            #endregion

            byte[] content = null;
            switch (Path.GetExtension(_filepath).ToUpper())
            {
                case ".PAK":
                    CommandsPAK.Write(_entryPoints, Entries, out content);
                    break;
                case ".BIN":
                    CommandsBIN.Write(_entryPoints, Entries, out content);
                    break;
                default:
                    return false;
            }
            using (BinaryWriter writer = new BinaryWriter(File.OpenWrite(_filepath)))
            {
                writer.BaseStream.SetLength(0);
                writer.Write(content);
            }
            return true;
        }
        #endregion

        #region ACCESSORS
        /* Add a new composite */
        public Composite AddComposite(string name, bool isRoot = false)
        {
            Composite comp = new Composite(name);
            Entries.Add(comp);
            if (isRoot) SetRootComposite(comp);
            return comp;
        }

        /* Return a list of filenames for composites in the CommandsPAK archive */
        public string[] GetCompositeNames()
        {
            string[] toReturn = new string[Entries.Count];
            for (int i = 0; i < Entries.Count; i++) toReturn[i] = Entries[i].name;
            return toReturn;
        }

        /* Get an individual composite */
        public Composite GetComposite(string name)
        {
            return Entries.FirstOrDefault(o => o != null && o.name == name || o.name == name.Replace('/', '\\'));
        }
        public Composite GetComposite(ShortGuid id)
        {
            return Entries.FirstOrDefault(o => o != null && o.shortGUID == id);
        }

        /* Get entry point composite objects */
        public Composite[] EntryPoints
        {
            get
            {
                if (_entryPoints == null) return null;
                if (_entryPointObjects != null) return _entryPointObjects;
                RefreshEntryPointObjects();
                return _entryPointObjects;
            }
        }

        /* Set the root composite for this COMMANDS.PAK (the root of the level - GLOBAL and PAUSEMENU are also instanced) */
        public void SetRootComposite(Composite composite)
        {
            SetRootComposite(composite.shortGUID);
        }
        public void SetRootComposite(ShortGuid compositeID)
        {
            if (_entryPoints == null)
                _entryPoints = new ShortGuid[3];

            _entryPoints[0] = compositeID;
            _entryPointObjects = null;
        }
        #endregion

        #region HELPERS

        /* Refresh the composite pointers for our entry points */
        private void RefreshEntryPointObjects()
        {
            _entryPointObjects = new Composite[_entryPoints.Length];
            for (int i = 0; i < _entryPoints.Length; i++) _entryPointObjects[i] = GetComposite(_entryPoints[i]);
        }

        /* Test Stuff */
        private void IsParameterReferencedAnywhere(ShortGuid id)
        {
            Parallel.ForEach(Entries, comp =>
            {
                Parallel.ForEach(comp.functions, func =>
                {
                    Parallel.ForEach(func.parameters, param =>
                    {
                        if (param.name == id)
                            Console.WriteLine("[" + id + "] " + comp.name + " -> " + Utils.GetEntityName(comp.shortGUID, func.shortGUID) + " -> " + param.name + " [" + param.content.dataType + "]");
                    });
                });
            });
        }
        #endregion
    }
}